# Generated by Django 3.2.5 on 2021-08-07 12:47

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('chat_id', models.CharField(max_length=16, primary_key=True, serialize=False, verbose_name='聊天室 ID')),
            ],
            options={
                'verbose_name': '聊天室',
                'verbose_name_plural': '聊天室',
            },
        ),
        migrations.CreateModel(
            name='Goods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goods_title', models.CharField(max_length=128, verbose_name='商品标题')),
                ('goods_price', models.DecimalField(decimal_places=2, max_digits=32, verbose_name='商品价格')),
                ('goods_main_image', models.CharField(blank=True, max_length=256, null=True, verbose_name='商品主图')),
                ('goods_desc', models.TextField(max_length=1000, verbose_name='商品描述')),
                ('goods_launch_time', models.DateTimeField(auto_now_add=True, verbose_name='商品上架时间')),
                ('goods_area', models.IntegerField(choices=[(1, '普通分区'), (2, '特价分区'), (3, '免费分区')], default=1, verbose_name='商品分区')),
                ('goods_is_sold', models.BooleanField(default=False, verbose_name='是否已卖出')),
                ('goods_type', models.IntegerField(choices=[(1, '手机'), (2, '男装'), (3, '女装'), (4, '数码'), (5, '运动'), (6, '洗护'), (7, '食品'), (8, '箱包'), (9, '鞋靴'), (10, '饰品'), (11, '电器'), (12, '医药'), (13, '书籍'), (14, '文具'), (15, '其它')], default=15, verbose_name='商品类别')),
                ('flag', models.IntegerField(choices=[(3000, '等待管理员审核'), (3001, '审核通过'), (3002, '审核未通过')], default=3000, verbose_name='商品是否审核')),
            ],
            options={
                'verbose_name': '商品',
                'verbose_name_plural': '商品',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags_content', models.CharField(max_length=32, verbose_name='标签内容')),
            ],
            options={
                'verbose_name': '标签',
                'verbose_name_plural': '标签',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thread_info', models.TextField(max_length=2000, verbose_name='帖子内容')),
                ('thread_time', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('thread_appreciate', models.IntegerField(default=0, verbose_name='点赞数')),
                ('flag', models.IntegerField(choices=[(3000, '等待管理员审核'), (3001, '审核通过'), (3002, '审核未通过')], default=3000, verbose_name='帖子是否审核')),
            ],
            options={
                'verbose_name': '帖子',
                'verbose_name_plural': '帖子',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=128, unique=True, verbose_name='学号')),
                ('user_name', models.CharField(max_length=64, verbose_name='用户名')),
                ('avatar', models.CharField(blank=True, max_length=256, null=True, verbose_name='用户头像')),
                ('password', models.CharField(max_length=256, verbose_name='密码')),
                ('school_zone', models.IntegerField(choices=[(1, '前湖校区-医学部'), (2, '前湖校区-天健'), (3, '前湖校区-修贤'), (4, '东湖校区'), (5, '青山湖校区'), (6, '鄱阳湖校区'), (7, '抚州校区')], default=1, verbose_name='校区')),
                ('user_type', models.IntegerField(choices=[(1, '普通用户'), (2, '管理员')], default=1, verbose_name='用户类型')),
                ('profile', models.CharField(blank=True, max_length=200, null=True, verbose_name='个人简介')),
                ('qq', models.CharField(max_length=16, verbose_name='QQ')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
        ),
        migrations.CreateModel(
            name='WeChatCertification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openid', models.CharField(max_length=28)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo')),
            ],
            options={
                'verbose_name': '微信认证',
                'verbose_name_plural': '微信认证',
            },
        ),
        migrations.CreateModel(
            name='UserChatRoomStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_enter_time', models.DateTimeField(default=datetime.datetime(2021, 8, 7, 20, 47, 54, 500932), verbose_name='上次浏览时间')),
                ('chat_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatStatus', to='users.chatroom', verbose_name='聊天室 ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户聊天室状态',
                'verbose_name_plural': '用户聊天室状态',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_content', models.CharField(max_length=128, verbose_name='话题')),
                ('topic_focus', models.ManyToManyField(to='users.UserInfo', verbose_name='关注用户')),
            ],
            options={
                'verbose_name': '话题',
                'verbose_name_plural': '话题',
            },
        ),
        migrations.CreateModel(
            name='ThreadReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.IntegerField(choices=[(1, '违法违规'), (2, '色情'), (3, '低俗'), (4, '赌博诈骗'), (5, '人身攻击'), (6, '侵犯隐私'), (7, '垃圾广告'), (8, '青少年不良信息'), (9, '标题党/封面党'), (10, '其它')], default=10, verbose_name='举报原因')),
                ('other_reason', models.TextField(blank=True, null=True, verbose_name='其它原因')),
                ('related_thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_thread_set', to='users.thread', verbose_name='被举报的帖子')),
                ('whistleblower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='举报人')),
            ],
            options={
                'verbose_name': '帖子举报信息',
                'verbose_name_plural': '帖子举报信息',
            },
        ),
        migrations.CreateModel(
            name='ThreadImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.CharField(max_length=256)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.thread', verbose_name='帖子图')),
            ],
            options={
                'verbose_name': '帖子图',
                'verbose_name_plural': '帖子图',
            },
        ),
        migrations.CreateModel(
            name='ThreadComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_appreciate', models.IntegerField(default=0, verbose_name='点赞数')),
                ('comment_parent_id', models.IntegerField(blank=True, null=True, verbose_name='父评论id')),
                ('comment_content', models.CharField(max_length=1024, verbose_name='评论内容')),
                ('comment_time', models.DateTimeField(auto_now_add=True, verbose_name='帖子发布时间')),
                ('appreciate_user', models.ManyToManyField(related_name='appreciate_user_set', to='users.UserInfo', verbose_name='点赞用户')),
                ('comment_reply_id', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='回复用户')),
                ('thread_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thread_info_set', to='users.thread', verbose_name='关联帖子')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_info_set', to='users.userinfo', verbose_name='评论用户')),
            ],
            options={
                'verbose_name': '帖子评论',
                'verbose_name_plural': '帖子评论',
            },
        ),
        migrations.AddField(
            model_name='thread',
            name='author_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thread_author_info_set', to='users.userinfo', verbose_name='用户信息'),
        ),
        migrations.AddField(
            model_name='thread',
            name='thread_appreciate_peoples',
            field=models.ManyToManyField(related_name='thread_appreciate_peoples_set', to='users.UserInfo', verbose_name='点赞人员'),
        ),
        migrations.AddField(
            model_name='thread',
            name='thread_topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thread_topic_set', to='users.topic', verbose_name='所属话题'),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_content', models.TextField(max_length=2048, verbose_name='消息内容')),
                ('message_is_watch', models.BooleanField(default=False, verbose_name='消息是否阅读')),
                ('message_time', models.DateTimeField(auto_now_add=True, verbose_name='消息发布时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_set', to='users.userinfo', verbose_name='消息所属用户')),
                ('related_thread', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_thread_set', to='users.thread', verbose_name='关联帖子')),
                ('reply_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_user_set', to='users.userinfo', verbose_name='消息回复的用户')),
            ],
            options={
                'verbose_name': '消息',
                'verbose_name_plural': '消息',
            },
        ),
        migrations.CreateModel(
            name='GoodsAllImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.CharField(max_length=256)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.goods', verbose_name='关联商品')),
            ],
            options={
                'verbose_name': '商品图片',
                'verbose_name_plural': '商品图片',
            },
        ),
        migrations.AddField(
            model_name='goods',
            name='buyer',
            field=models.ManyToManyField(related_name='goods_buyer_set', to='users.UserInfo', verbose_name='买家'),
        ),
        migrations.AddField(
            model_name='goods',
            name='goods_tags',
            field=models.ManyToManyField(related_name='goods_tags_set', to='users.Tags', verbose_name='商品标签'),
        ),
        migrations.AddField(
            model_name='goods',
            name='goods_wanted_person',
            field=models.ManyToManyField(related_name='goods_wanted_person_set', to='users.UserInfo', verbose_name='想要的用户'),
        ),
        migrations.AddField(
            model_name='goods',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goods_seller_set', to='users.userinfo', verbose_name='卖家'),
        ),
        migrations.CreateModel(
            name='GoodReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.IntegerField(choices=[(1, '违法违规'), (2, '色情'), (3, '低俗'), (4, '赌博诈骗'), (5, '人身攻击'), (6, '侵犯隐私'), (7, '垃圾广告'), (8, '青少年不良信息'), (9, '标题党/封面党'), (10, '其它')], default=10, verbose_name='举报原因')),
                ('other_reason', models.TextField(blank=True, null=True, verbose_name='其它原因')),
                ('related_good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_good_set', to='users.goods', verbose_name='被举报的商品')),
                ('whistleblower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='举报人')),
            ],
            options={
                'verbose_name': '商品举报信息',
                'verbose_name_plural': '商品举报信息',
            },
        ),
        migrations.CreateModel(
            name='CommentReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.IntegerField(choices=[(1, '违法违规'), (2, '色情'), (3, '低俗'), (4, '赌博诈骗'), (5, '人身攻击'), (6, '侵犯隐私'), (7, '垃圾广告'), (8, '青少年不良信息'), (9, '标题党/封面党'), (10, '其它')], default=10, verbose_name='举报原因')),
                ('other_reason', models.TextField(blank=True, null=True, verbose_name='其它原因')),
                ('related_comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_comment_set', to='users.threadcomment', verbose_name='被举报的评论')),
                ('whistleblower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='举报人')),
            ],
            options={
                'verbose_name': '评论举报信息',
                'verbose_name_plural': '评论举报信息',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_msg_type', models.SmallIntegerField(choices=[(1, 'text'), (2, 'img')], default=1, verbose_name='消息类型')),
                ('chat_status', models.SmallIntegerField(choices=[(1, 'success'), (2, 'fail')], default=1, verbose_name='消息状态')),
                ('chat_msg', models.CharField(max_length=1024, verbose_name='消息内容')),
                ('chat_time', models.DateTimeField(verbose_name='消息发送时间')),
                ('chat_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message', to='users.chatroom', verbose_name='所属聊天室')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userinfo', verbose_name='消息发送人')),
            ],
            options={
                'verbose_name': '聊天消息',
                'verbose_name_plural': '聊天消息',
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend_status', models.SmallIntegerField(choices=[(1, '好友申请中'), (2, '正式好友'), (3, '申请被拒绝')], default=1, verbose_name='好友状态')),
                ('friend_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend', to='users.userinfo', verbose_name='其好友 ID')),
                ('own_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='own', to='users.userinfo', verbose_name='此好友的拥有人')),
            ],
            options={
                'verbose_name': '好友',
                'verbose_name_plural': '好友',
                'unique_together': {('own_id', 'friend_id')},
            },
        ),
    ]
